/* Header generated by AMXX-Studio*/

#if defined _KnifeSystem_included
	#endinput
#endif
#define _KnifeSystem_included

enum _:eKnifeInfo
{
	sName,
	sVModel, 
	sPModel,
	fSpeed,
	fGravity,
	fDamage,
	fKnockback,
	fHealth,
	iVisibly,
	iLevel
}

enum _:ePlayerInfo
{
	iPlayerLvl,
	iPlayerXp,
	iPlayerPoints,
	iPlayerSelected
};

/* Gets the needed xp to level up on given level.
	@param iNum		The level or the identity of the player.
	@param bPlayer		If true, then iNum must be a playerid, if false then iNum is a level.
	
	@return			The needed xp to level up on the given level.
*/
native ks_get_xp_to_lvl_up( iNum, bool:bPlayer )

/* Return the max level.
	@return			The maximum reachable level on the server.
*/
native ks_get_max_level( );

/* Sets an info about the player.
	@param iPlayerId	The indentity of the player.
	@param iPlayerInfo	An info constans. ( See ePlayerInfo enumeration )
	
	@noreturn
*/
native ks_set_player_info( iPlayerId, iPlayerInfo, iValue );

/* Gets an info about the given player.
	@param iPlayerId	The indentity of the player.
	@param iPlayerInfo	An info constans. ( See ePlayerInfo enumeration )
	
	@return			The value of the given info.
*/
native ks_get_player_info( iPlayerId, iPlayerInfo );

/* Gets an info about the knife. ( name, v/p_model, abilities )
	@param iKnfeInfo	An info constans. ( See eKnifeInfo enumeration )
	@param iKnfeId		The identity of the knife.
	@param any		If the info is string, then you must give an array as third param to copy the info in.
					And as fourth param the length of the given array, just for safe.
	
	@return			The value of the info or 1 if the info is string.
*/
native ks_get_knife_info( iKnifeInfo, iKnifeId, any:... );

/* Registers a custom item in the shop.
	@param sItemName	Name of the item in the shop.
	@param sItemFunction	The function to call, if someone buy the item.
	@param iCost		The prise of the item. ( points )
	@param iAcces		Necessary flags to buy this item.
	
	@return			The identity of the registred item.
*/
native ks_register_item( const sItemName[ ], const sItemFunction[ ], iCost, iAccess = 0 );

/* Registers a callback to the given custom item.
	@param iItemId		The identity of the item.
	@param iCallbackId	The identity of the callback.
	
	@return			True if the register success, false if not.
*/
native ks_register_item_callback( iItemId, iCallbackId );

/* Called when a player lvl up.
	@arg iPlayerId		Identity of the player, who reached a new level.
	@arg iPlayerNewLvl	The new level.
*/
forward ks_level_up( iPlayerId, iPlayerNewLvl );

/* Called when a player reached the maximum level.
	@arg iPlayerId		Identity of the player, who reached a new level.
*/
forward ks_max_lvl_reached( iPlayerId );

/* Called when a player selected a new knife.
	@arg iPlayerId		Identity of the player, who reached a new level.
	@arg iKnifeId		Identity of the knife, what selected the player.
*/
forward ks_knife_selected( iPlayerId, iKnifeId );
